name: Build and Deploy to IKS

on:
  push:
    branches:
      - main

env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: iks-test
  IKS_CLUSTER: example-iks-cluster-name-or-id
  DEPLOYMENT_NAME: iks-test
  PORT: 5001
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Install IBM Cloud CLI
        run: |
          curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
          ibmcloud --version
          ibmcloud config --check-version=false
          ibmcloud plugin install -f kubernetes-service
          ibmcloud plugin install -f container-registry

      - name: Authenticate with IBM Cloud CLI
        run: |
          ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
          ibmcloud cr region-set "${IBM_CLOUD_REGION}"
          ibmcloud cr login

      - name: Run Unit Tests
        run: |
          # Add commands to run your unit tests here
          # For example: python -m unittest discover

      - name: Run Integration Tests
        run: |
          # Add commands to run your integration tests here
          # For example: behave

      - name: Build with Docker
        run: |
          docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      - name: Push the image to ICR
        run: |
          docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA

      - name: Deploy to IKS
        run: |
          ibmcloud ks cluster config --cluster $IKS_CLUSTER
          kubectl config current-context
          kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
          kubectl apply -f deployment.yaml
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
          kubectl apply -f service.yaml
          kubectl get services -o wide

      - name: Notify Slack on Success
        if: ${{ success() }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Deployment to IKS succeeded on branch ${GITHUB_REF} at commit ${GITHUB_SHA}\"}" $SLACK_WEBHOOK

      - name: Promote Docker image to Production Tag
        run: |
          docker tag $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:production
          docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:production

      - name: Clean up deployment files
        run: |
          rm deployment.yaml
          rm service.yaml

    # Run Integration Tests in Parallel
      - name: Run Integration Tests in Parallel
        run: |
        # Install and configure parallel testing tool (e.g., pytest-xdist for Python)
        # Run integration tests in parallel to speed up the testing process

    # Promote the Docker image to a production-ready tag
      - name: Promote Docker image to Production Tag
        run: |
          docker tag $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:production
          docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:production

    # Notify Slack on successful deployment
      - name: Notify Slack on Success
        if: ${{ success() }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Deployment to IKS succeeded on branch ${GITHUB_REF} at commit ${GITHUB_SHA}\"}" $SLACK_WEBHOOK

  rollback-deployment:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: setup-build-publish-deploy
    if: ${{ failure() }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Authenticate with IBM Cloud CLI
        run: |
          ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
          ibmcloud cr region-set "${IBM_CLOUD_REGION}"
          ibmcloud cr login

      - name: Rollback Deployment to Previous Version
        run: |
          ibmcloud ks cluster config --cluster $IKS_CLUSTER
          kubectl config current-context
          kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:production
          kubectl rollout status deployment/$DEPLOYMENT_NAME

      - name: Clean up deployment files
        run: |
          rm deployment.yaml
          rm service.yaml

